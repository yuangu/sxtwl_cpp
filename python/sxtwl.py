# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sxtwl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sxtwl')
    _sxtwl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sxtwl', [dirname(__file__)])
        except ImportError:
            import _sxtwl
            return _sxtwl
        try:
            _mod = imp.load_module('_sxtwl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sxtwl = swig_import_helper()
    del swig_import_helper
else:
    import _sxtwl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sxtwl.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _sxtwl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sxtwl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sxtwl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sxtwl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sxtwl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sxtwl.SwigPyIterator_copy(self)

    def next(self):
        return _sxtwl.SwigPyIterator_next(self)

    def __next__(self):
        return _sxtwl.SwigPyIterator___next__(self)

    def previous(self):
        return _sxtwl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sxtwl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sxtwl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sxtwl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sxtwl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sxtwl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sxtwl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sxtwl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _sxtwl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DayList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DayList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sxtwl.DayList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sxtwl.DayList___nonzero__(self)

    def __bool__(self):
        return _sxtwl.DayList___bool__(self)

    def __len__(self):
        return _sxtwl.DayList___len__(self)

    def __getslice__(self, i, j):
        return _sxtwl.DayList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sxtwl.DayList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sxtwl.DayList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sxtwl.DayList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sxtwl.DayList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sxtwl.DayList___setitem__(self, *args)

    def pop(self):
        return _sxtwl.DayList_pop(self)

    def append(self, x):
        return _sxtwl.DayList_append(self, x)

    def empty(self):
        return _sxtwl.DayList_empty(self)

    def size(self):
        return _sxtwl.DayList_size(self)

    def swap(self, v):
        return _sxtwl.DayList_swap(self, v)

    def begin(self):
        return _sxtwl.DayList_begin(self)

    def end(self):
        return _sxtwl.DayList_end(self)

    def rbegin(self):
        return _sxtwl.DayList_rbegin(self)

    def rend(self):
        return _sxtwl.DayList_rend(self)

    def clear(self):
        return _sxtwl.DayList_clear(self)

    def get_allocator(self):
        return _sxtwl.DayList_get_allocator(self)

    def pop_back(self):
        return _sxtwl.DayList_pop_back(self)

    def erase(self, *args):
        return _sxtwl.DayList_erase(self, *args)

    def __init__(self, *args):
        this = _sxtwl.new_DayList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sxtwl.DayList_push_back(self, x)

    def front(self):
        return _sxtwl.DayList_front(self)

    def back(self):
        return _sxtwl.DayList_back(self)

    def assign(self, n, x):
        return _sxtwl.DayList_assign(self, n, x)

    def resize(self, *args):
        return _sxtwl.DayList_resize(self, *args)

    def insert(self, *args):
        return _sxtwl.DayList_insert(self, *args)

    def reserve(self, n):
        return _sxtwl.DayList_reserve(self, n)

    def capacity(self):
        return _sxtwl.DayList_capacity(self)
    __swig_destroy__ = _sxtwl.delete_DayList
    __del__ = lambda self: None
DayList_swigregister = _sxtwl.DayList_swigregister
DayList_swigregister(DayList)

J2000 = _sxtwl.J2000
class GZ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GZ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tg"] = _sxtwl.GZ_tg_set
    __swig_getmethods__["tg"] = _sxtwl.GZ_tg_get
    if _newclass:
        tg = _swig_property(_sxtwl.GZ_tg_get, _sxtwl.GZ_tg_set)
    __swig_setmethods__["dz"] = _sxtwl.GZ_dz_set
    __swig_getmethods__["dz"] = _sxtwl.GZ_dz_get
    if _newclass:
        dz = _swig_property(_sxtwl.GZ_dz_get, _sxtwl.GZ_dz_set)

    def __init__(self):
        this = _sxtwl.new_GZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sxtwl.delete_GZ
    __del__ = lambda self: None
GZ_swigregister = _sxtwl.GZ_swigregister
GZ_swigregister(GZ)

class Day(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Day, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Day, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d0"] = _sxtwl.Day_d0_set
    __swig_getmethods__["d0"] = _sxtwl.Day_d0_get
    if _newclass:
        d0 = _swig_property(_sxtwl.Day_d0_get, _sxtwl.Day_d0_set)
    __swig_setmethods__["di"] = _sxtwl.Day_di_set
    __swig_getmethods__["di"] = _sxtwl.Day_di_get
    if _newclass:
        di = _swig_property(_sxtwl.Day_di_get, _sxtwl.Day_di_set)
    __swig_setmethods__["y"] = _sxtwl.Day_y_set
    __swig_getmethods__["y"] = _sxtwl.Day_y_get
    if _newclass:
        y = _swig_property(_sxtwl.Day_y_get, _sxtwl.Day_y_set)
    __swig_setmethods__["m"] = _sxtwl.Day_m_set
    __swig_getmethods__["m"] = _sxtwl.Day_m_get
    if _newclass:
        m = _swig_property(_sxtwl.Day_m_get, _sxtwl.Day_m_set)
    __swig_setmethods__["d"] = _sxtwl.Day_d_set
    __swig_getmethods__["d"] = _sxtwl.Day_d_get
    if _newclass:
        d = _swig_property(_sxtwl.Day_d_get, _sxtwl.Day_d_set)
    __swig_setmethods__["dn"] = _sxtwl.Day_dn_set
    __swig_getmethods__["dn"] = _sxtwl.Day_dn_get
    if _newclass:
        dn = _swig_property(_sxtwl.Day_dn_get, _sxtwl.Day_dn_set)
    __swig_setmethods__["week0"] = _sxtwl.Day_week0_set
    __swig_getmethods__["week0"] = _sxtwl.Day_week0_get
    if _newclass:
        week0 = _swig_property(_sxtwl.Day_week0_get, _sxtwl.Day_week0_set)
    __swig_setmethods__["week"] = _sxtwl.Day_week_set
    __swig_getmethods__["week"] = _sxtwl.Day_week_get
    if _newclass:
        week = _swig_property(_sxtwl.Day_week_get, _sxtwl.Day_week_set)
    __swig_setmethods__["weeki"] = _sxtwl.Day_weeki_set
    __swig_getmethods__["weeki"] = _sxtwl.Day_weeki_get
    if _newclass:
        weeki = _swig_property(_sxtwl.Day_weeki_get, _sxtwl.Day_weeki_set)
    __swig_setmethods__["weekN"] = _sxtwl.Day_weekN_set
    __swig_getmethods__["weekN"] = _sxtwl.Day_weekN_get
    if _newclass:
        weekN = _swig_property(_sxtwl.Day_weekN_get, _sxtwl.Day_weekN_set)
    __swig_setmethods__["Ldi"] = _sxtwl.Day_Ldi_set
    __swig_getmethods__["Ldi"] = _sxtwl.Day_Ldi_get

    if _newclass:
        Ldi = _swig_property(_sxtwl.Day_Ldi_get, _sxtwl.Day_Ldi_set)
    __swig_setmethods__["cur_dz"] = _sxtwl.Day_cur_dz_set
    __swig_getmethods__["cur_dz"] = _sxtwl.Day_cur_dz_get

    if _newclass:
        cur_dz = _swig_property(_sxtwl.Day_cur_dz_get, _sxtwl.Day_cur_dz_set)
    __swig_setmethods__["cur_xz"] = _sxtwl.Day_cur_xz_set
    __swig_getmethods__["cur_xz"] = _sxtwl.Day_cur_xz_get

    if _newclass:
        cur_xz = _swig_property(_sxtwl.Day_cur_xz_get, _sxtwl.Day_cur_xz_set)
    __swig_setmethods__["cur_lq"] = _sxtwl.Day_cur_lq_set
    __swig_getmethods__["cur_lq"] = _sxtwl.Day_cur_lq_get

    if _newclass:
        cur_lq = _swig_property(_sxtwl.Day_cur_lq_get, _sxtwl.Day_cur_lq_set)
    __swig_setmethods__["cur_mz"] = _sxtwl.Day_cur_mz_set
    __swig_getmethods__["cur_mz"] = _sxtwl.Day_cur_mz_get

    if _newclass:
        cur_mz = _swig_property(_sxtwl.Day_cur_mz_get, _sxtwl.Day_cur_mz_set)
    __swig_setmethods__["cur_xs"] = _sxtwl.Day_cur_xs_set
    __swig_getmethods__["cur_xs"] = _sxtwl.Day_cur_xs_get

    if _newclass:
        cur_xs = _swig_property(_sxtwl.Day_cur_xs_get, _sxtwl.Day_cur_xs_set)
    __swig_setmethods__["cur_jq"] = _sxtwl.Day_cur_jq_set
    __swig_getmethods__["cur_jq"] = _sxtwl.Day_cur_jq_get

    __swig_setmethods__["cur_xh"] = _sxtwl.Day_cur_xh_set
    __swig_getmethods__["cur_xh"] = _sxtwl.Day_cur_xh_get
    if _newclass:
        cur_xh = _swig_property(_sxtwl.Day_cur_xh_get, _sxtwl.Day_cur_xh_set)

    __swig_setmethods__["cur_dh"] = _sxtwl.Day_cur_dh_set
    __swig_getmethods__["cur_dh"] = _sxtwl.Day_cur_dh_get
    if _newclass:
        cur_dh = _swig_property(_sxtwl.Day_cur_dh_get, _sxtwl.Day_cur_dh_set)

    __swig_setmethods__["cur_lc"] = _sxtwl.Day_cur_lc_set
    __swig_getmethods__["cur_lc"] = _sxtwl.Day_cur_lc_get
    if _newclass:
        cur_lc = _swig_property(_sxtwl.Day_cur_lc_get, _sxtwl.Day_cur_lc_set)

    __swig_setmethods__["cur_ys"] = _sxtwl.Day_cur_ys_set
    __swig_getmethods__["cur_ys"] = _sxtwl.Day_cur_ys_get
    if _newclass:
        cur_ys = _swig_property(_sxtwl.Day_cur_ys_get, _sxtwl.Day_cur_ys_set)

    __swig_setmethods__["cur_zc"] = _sxtwl.Day_cur_zc_set
    __swig_getmethods__["cur_zc"] = _sxtwl.Day_cur_zc_get
    if _newclass:
        cur_zc = _swig_property(_sxtwl.Day_cur_zc_get, _sxtwl.Day_cur_zc_set)

    __swig_setmethods__["cur_cf"] = _sxtwl.Day_cur_cf_set
    __swig_getmethods__["cur_cf"] = _sxtwl.Day_cur_cf_get
    if _newclass:
        cur_cf = _swig_property(_sxtwl.Day_cur_cf_get, _sxtwl.Day_cur_cf_set)

    __swig_setmethods__["cur_qm"] = _sxtwl.Day_cur_qm_set
    __swig_getmethods__["cur_qm"] = _sxtwl.Day_cur_qm_get
    if _newclass:
        cur_qm = _swig_property(_sxtwl.Day_cur_qm_get, _sxtwl.Day_cur_qm_set)

    __swig_setmethods__["cur_gy"] = _sxtwl.Day_cur_gy_set
    __swig_getmethods__["cur_gy"] = _sxtwl.Day_cur_gy_get
    if _newclass:
        cur_gy = _swig_property(_sxtwl.Day_cur_gy_get, _sxtwl.Day_cur_gy_set)

    __swig_setmethods__["cur_lx"] = _sxtwl.Day_cur_lx_set
    __swig_getmethods__["cur_lx"] = _sxtwl.Day_cur_lx_get
    if _newclass:
        cur_lx = _swig_property(_sxtwl.Day_cur_lx_get, _sxtwl.Day_cur_lx_set)

    __swig_setmethods__["cur_xm"] = _sxtwl.Day_cur_xm_set
    __swig_getmethods__["cur_xm"] = _sxtwl.Day_cur_xm_get
    if _newclass:
        cur_xm = _swig_property(_sxtwl.Day_cur_xm_get, _sxtwl.Day_cur_xm_set)

    __swig_setmethods__["cur_ds"] = _sxtwl.Day_cur_ds_set
    __swig_getmethods__["cur_ds"] = _sxtwl.Day_cur_ds_get
    if _newclass:
        cur_ds = _swig_property(_sxtwl.Day_cur_ds_get, _sxtwl.Day_cur_ds_set)

    __swig_setmethods__["cur_cs"] = _sxtwl.Day_cur_cs_set
    __swig_getmethods__["cur_cs"] = _sxtwl.Day_cur_cs_get
    if _newclass:
        cur_cs = _swig_property(_sxtwl.Day_cur_cs_get, _sxtwl.Day_cur_cs_set)

    __swig_setmethods__["cur_bl"] = _sxtwl.Day_cur_bl_set
    __swig_getmethods__["cur_bl"] = _sxtwl.Day_cur_bl_get
    if _newclass:
        cur_bl = _swig_property(_sxtwl.Day_cur_bl_get, _sxtwl.Day_cur_bl_set)

    __swig_setmethods__["cur_qf"] = _sxtwl.Day_cur_qf_set
    __swig_getmethods__["cur_qf"] = _sxtwl.Day_cur_qf_get
    if _newclass:
        cur_qf = _swig_property(_sxtwl.Day_cur_qf_get, _sxtwl.Day_cur_qf_set)

    __swig_setmethods__["cur_hl"] = _sxtwl.Day_cur_hl_set
    __swig_getmethods__["cur_hl"] = _sxtwl.Day_cur_hl_get
    if _newclass:
        cur_hl = _swig_property(_sxtwl.Day_cur_hl_get, _sxtwl.Day_cur_hl_set)

    __swig_setmethods__["cur_sj"] = _sxtwl.Day_cur_sj_set
    __swig_getmethods__["cur_sj"] = _sxtwl.Day_cur_sj_get
    if _newclass:
        cur_sj = _swig_property(_sxtwl.Day_cur_sj_get, _sxtwl.Day_cur_sj_set)

    __swig_setmethods__["cur_ld"] = _sxtwl.Day_cur_ld_set
    __swig_getmethods__["cur_ld"] = _sxtwl.Day_cur_ld_get
    if _newclass:
        cur_ld = _swig_property(_sxtwl.Day_cur_ld_get, _sxtwl.Day_cur_ld_set)

    __swig_setmethods__["cur_xx"] = _sxtwl.Day_cur_xx_set
    __swig_getmethods__["cur_xx"] = _sxtwl.Day_cur_xx_get
    if _newclass:
        cur_xx = _swig_property(_sxtwl.Day_cur_xx_get, _sxtwl.Day_cur_xx_set)

    __swig_setmethods__["cur_dx"] = _sxtwl.Day_cur_dx_set
    __swig_getmethods__["cur_dx"] = _sxtwl.Day_cur_dx_get
    if _newclass:
        cur_dx = _swig_property(_sxtwl.Day_cur_dx_get, _sxtwl.Day_cur_dx_set)

    if _newclass:
        cur_jq = _swig_property(_sxtwl.Day_cur_jq_get, _sxtwl.Day_cur_jq_set)
    __swig_setmethods__["Lmc"] = _sxtwl.Day_Lmc_set
    __swig_getmethods__["Lmc"] = _sxtwl.Day_Lmc_get
    if _newclass:
        Lmc = _swig_property(_sxtwl.Day_Lmc_get, _sxtwl.Day_Lmc_set)
    __swig_setmethods__["Ldn"] = _sxtwl.Day_Ldn_set
    __swig_getmethods__["Ldn"] = _sxtwl.Day_Ldn_get
    if _newclass:
        Ldn = _swig_property(_sxtwl.Day_Ldn_get, _sxtwl.Day_Ldn_set)
    __swig_setmethods__["Lleap"] = _sxtwl.Day_Lleap_set
    __swig_getmethods__["Lleap"] = _sxtwl.Day_Lleap_get
    if _newclass:
        Lleap = _swig_property(_sxtwl.Day_Lleap_get, _sxtwl.Day_Lleap_set)
    __swig_setmethods__["Lmc2"] = _sxtwl.Day_Lmc2_set
    __swig_getmethods__["Lmc2"] = _sxtwl.Day_Lmc2_get
    if _newclass:
        Lmc2 = _swig_property(_sxtwl.Day_Lmc2_get, _sxtwl.Day_Lmc2_set)
    __swig_setmethods__["qk"] = _sxtwl.Day_qk_set
    __swig_getmethods__["qk"] = _sxtwl.Day_qk_get
    if _newclass:
        qk = _swig_property(_sxtwl.Day_qk_get, _sxtwl.Day_qk_set)
    __swig_setmethods__["Lyear"] = _sxtwl.Day_Lyear_set
    __swig_getmethods__["Lyear"] = _sxtwl.Day_Lyear_get
    if _newclass:
        Lyear = _swig_property(_sxtwl.Day_Lyear_get, _sxtwl.Day_Lyear_set)
    __swig_setmethods__["Lyear0"] = _sxtwl.Day_Lyear0_set
    __swig_getmethods__["Lyear0"] = _sxtwl.Day_Lyear0_get
    if _newclass:
        Lyear0 = _swig_property(_sxtwl.Day_Lyear0_get, _sxtwl.Day_Lyear0_set)
    __swig_setmethods__["Lyear2"] = _sxtwl.Day_Lyear2_set
    __swig_getmethods__["Lyear2"] = _sxtwl.Day_Lyear2_get
    if _newclass:
        Lyear2 = _swig_property(_sxtwl.Day_Lyear2_get, _sxtwl.Day_Lyear2_set)
    __swig_setmethods__["Lyear3"] = _sxtwl.Day_Lyear3_set
    __swig_getmethods__["Lyear3"] = _sxtwl.Day_Lyear3_get
    if _newclass:
        Lyear3 = _swig_property(_sxtwl.Day_Lyear3_get, _sxtwl.Day_Lyear3_set)
    __swig_setmethods__["Lyear4"] = _sxtwl.Day_Lyear4_set
    __swig_getmethods__["Lyear4"] = _sxtwl.Day_Lyear4_get
    if _newclass:
        Lyear4 = _swig_property(_sxtwl.Day_Lyear4_get, _sxtwl.Day_Lyear4_set)
    __swig_setmethods__["Lmonth"] = _sxtwl.Day_Lmonth_set
    __swig_getmethods__["Lmonth"] = _sxtwl.Day_Lmonth_get
    if _newclass:
        Lmonth = _swig_property(_sxtwl.Day_Lmonth_get, _sxtwl.Day_Lmonth_set)
    __swig_setmethods__["Lmonth2"] = _sxtwl.Day_Lmonth2_set
    __swig_getmethods__["Lmonth2"] = _sxtwl.Day_Lmonth2_get
    if _newclass:
        Lmonth2 = _swig_property(_sxtwl.Day_Lmonth2_get, _sxtwl.Day_Lmonth2_set)
    __swig_setmethods__["Lday2"] = _sxtwl.Day_Lday2_set
    __swig_getmethods__["Lday2"] = _sxtwl.Day_Lday2_get
    if _newclass:
        Lday2 = _swig_property(_sxtwl.Day_Lday2_get, _sxtwl.Day_Lday2_set)
    __swig_setmethods__["XiZ"] = _sxtwl.Day_XiZ_set
    __swig_getmethods__["XiZ"] = _sxtwl.Day_XiZ_get
    if _newclass:
        XiZ = _swig_property(_sxtwl.Day_XiZ_get, _sxtwl.Day_XiZ_set)
    __swig_setmethods__["jqmc"] = _sxtwl.Day_jqmc_set
    __swig_getmethods__["jqmc"] = _sxtwl.Day_jqmc_get
    if _newclass:
        jqmc = _swig_property(_sxtwl.Day_jqmc_get, _sxtwl.Day_jqmc_set)
    __swig_setmethods__["jqjd"] = _sxtwl.Day_jqjd_set
    __swig_getmethods__["jqjd"] = _sxtwl.Day_jqjd_get
    if _newclass:
        jqjd = _swig_property(_sxtwl.Day_jqjd_get, _sxtwl.Day_jqjd_set)
    __swig_setmethods__["jqsj"] = _sxtwl.Day_jqsj_set
    __swig_getmethods__["jqsj"] = _sxtwl.Day_jqsj_get
    if _newclass:
        jqsj = _swig_property(_sxtwl.Day_jqsj_get, _sxtwl.Day_jqsj_set)
    __swig_setmethods__["yxmc"] = _sxtwl.Day_yxmc_set
    __swig_getmethods__["yxmc"] = _sxtwl.Day_yxmc_get
    if _newclass:
        yxmc = _swig_property(_sxtwl.Day_yxmc_get, _sxtwl.Day_yxmc_set)
    __swig_setmethods__["yxjd"] = _sxtwl.Day_yxjd_set
    __swig_getmethods__["yxjd"] = _sxtwl.Day_yxjd_get
    if _newclass:
        yxjd = _swig_property(_sxtwl.Day_yxjd_get, _sxtwl.Day_yxjd_set)
    __swig_setmethods__["yxsj"] = _sxtwl.Day_yxsj_set
    __swig_getmethods__["yxsj"] = _sxtwl.Day_yxsj_get
    if _newclass:
        yxsj = _swig_property(_sxtwl.Day_yxsj_get, _sxtwl.Day_yxsj_set)

    def __init__(self):
        this = _sxtwl.new_Day()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sxtwl.delete_Day
    __del__ = lambda self: None
Day_swigregister = _sxtwl.Day_swigregister
Day_swigregister(Day)

class Month(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Month, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Month, name)
    __repr__ = _swig_repr
    __swig_setmethods__["y"] = _sxtwl.Month_y_set
    __swig_getmethods__["y"] = _sxtwl.Month_y_get
    if _newclass:
        y = _swig_property(_sxtwl.Month_y_get, _sxtwl.Month_y_set)
    __swig_setmethods__["m"] = _sxtwl.Month_m_set
    __swig_getmethods__["m"] = _sxtwl.Month_m_get
    if _newclass:
        m = _swig_property(_sxtwl.Month_m_get, _sxtwl.Month_m_set)
    __swig_setmethods__["ShX"] = _sxtwl.Month_ShX_set
    __swig_getmethods__["ShX"] = _sxtwl.Month_ShX_get
    if _newclass:
        ShX = _swig_property(_sxtwl.Month_ShX_get, _sxtwl.Month_ShX_set)
    __swig_setmethods__["yearGan"] = _sxtwl.Month_yearGan_set
    __swig_getmethods__["yearGan"] = _sxtwl.Month_yearGan_get
    if _newclass:
        yearGan = _swig_property(_sxtwl.Month_yearGan_get, _sxtwl.Month_yearGan_set)
    __swig_setmethods__["yearZhi"] = _sxtwl.Month_yearZhi_set
    __swig_getmethods__["yearZhi"] = _sxtwl.Month_yearZhi_get
    if _newclass:
        yearZhi = _swig_property(_sxtwl.Month_yearZhi_get, _sxtwl.Month_yearZhi_set)
    __swig_setmethods__["days"] = _sxtwl.Month_days_set
    __swig_getmethods__["days"] = _sxtwl.Month_days_get
    if _newclass:
        days = _swig_property(_sxtwl.Month_days_get, _sxtwl.Month_days_set)

    def __init__(self):
        this = _sxtwl.new_Month()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sxtwl.delete_Month
    __del__ = lambda self: None
Month_swigregister = _sxtwl.Month_swigregister
Month_swigregister(Month)

class Year(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Year, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Year, name)
    __repr__ = _swig_repr
    __swig_setmethods__["y"] = _sxtwl.Year_y_set
    __swig_getmethods__["y"] = _sxtwl.Year_y_get
    if _newclass:
        y = _swig_property(_sxtwl.Year_y_get, _sxtwl.Year_y_set)
    __swig_setmethods__["ShX"] = _sxtwl.Year_ShX_set
    __swig_getmethods__["ShX"] = _sxtwl.Year_ShX_get
    if _newclass:
        ShX = _swig_property(_sxtwl.Year_ShX_get, _sxtwl.Year_ShX_set)
    __swig_setmethods__["yearGan"] = _sxtwl.Year_yearGan_set
    __swig_getmethods__["yearGan"] = _sxtwl.Year_yearGan_get
    if _newclass:
        yearGan = _swig_property(_sxtwl.Year_yearGan_get, _sxtwl.Year_yearGan_set)
    __swig_setmethods__["yearZhi"] = _sxtwl.Year_yearZhi_set
    __swig_getmethods__["yearZhi"] = _sxtwl.Year_yearZhi_get
    if _newclass:
        yearZhi = _swig_property(_sxtwl.Year_yearZhi_get, _sxtwl.Year_yearZhi_set)

    def __init__(self):
        this = _sxtwl.new_Year()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sxtwl.delete_Year
    __del__ = lambda self: None
Year_swigregister = _sxtwl.Year_swigregister
Year_swigregister(Year)

ErrorCode_Success = _sxtwl.ErrorCode_Success
ErrorCode_NotRun = _sxtwl.ErrorCode_NotRun
ErrorCode_DateError = _sxtwl.ErrorCode_DateError
class LunarException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LunarException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LunarException, name)
    __repr__ = _swig_repr

    def __init__(self, code):
        this = _sxtwl.new_LunarException(code)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def what(self):
        return _sxtwl.LunarException_what(self)

    def getErrorCode(self):
        return _sxtwl.LunarException_getErrorCode(self)
    __swig_destroy__ = _sxtwl.delete_LunarException
    __del__ = lambda self: None
LunarException_swigregister = _sxtwl.LunarException_swigregister
LunarException_swigregister(LunarException)

class Lunar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lunar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lunar, name)
    __repr__ = _swig_repr

    def yueLiCalc(self, By, Bm):
        return _sxtwl.Lunar_yueLiCalc(self, By, Bm)

    def getDayBySolar(self, year, month, day):
        return _sxtwl.Lunar_getDayBySolar(self, year, month, day)

    def getDayByLunar(self, year, month, day, isRun=False):
        return _sxtwl.Lunar_getDayByLunar(self, year, month, day, isRun)

    def getShiGz(self, dayTg, hour):
        return _sxtwl.Lunar_getShiGz(self, dayTg, hour)

    def getYearCal(self, By):
        return _sxtwl.Lunar_getYearCal(self, By)

    def getRunMonth(self, By):
        return _sxtwl.Lunar_getRunMonth(self, By)

    def getLunarMonthNum(self, By, month, isRun=False):
        return _sxtwl.Lunar_getLunarMonthNum(self, By, month, isRun)

    def __init__(self):
        this = _sxtwl.new_Lunar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sxtwl.delete_Lunar
    __del__ = lambda self: None
Lunar_swigregister = _sxtwl.Lunar_swigregister
Lunar_swigregister(Lunar)

# This file is compatible with both classic and new-style classes.


